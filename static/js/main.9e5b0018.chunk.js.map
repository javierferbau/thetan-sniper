{"version":3,"sources":["pages/components/Table.tsx","api/fetch.js","pages/dashboard/useDashboard.ts","pages/dashboard/utils.ts","pages/dashboard/Dashboard.tsx","App.js","reportWebVitals.js","index.js"],"names":["Table","columns","data","useTable","useSortBy","getTableProps","headerGroups","rows","prepareRow","place","type","effect","striped","bordered","hover","size","map","headerGroup","getHeaderGroupProps","headers","column","Footer","getHeaderProps","render","row","i","getRowProps","cells","cell","getCellProps","fetchDatas","a","fetch","res","json","Header","accessor","useDashboard","useState","wbnbPrice","setwbnbPrice","THCPrice","setTHCPrice","isRefetchInterval","setIsRefetchInterval","heroes","setHeroes","herosPriceAlarm","setPriceAlarm","needAlarm","setNeedAlarm","Audio","alarm","document","title","useQuery","refetchInterval","isLoading","iswbnbPriceLoading","then","result","toFixed","isTHCPriceLoading","useEffect","heros","heroRarityWinByWinDiccionary","heroRarityDiccionary","hero","usdPrice","price","heroRarityString","heroRarity","winCalc","battleCap","winDiffCalc","mapHerosCalc","some","x","play","Dashboard","herosPrice","setPrice","value","onChange","e","parseInt","target","onClick","queryClient","QueryClient","App","client","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9e5b0018.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nimport BTable from \"react-bootstrap/Table\";\r\n\r\nimport { useSortBy, useTable } from \"react-table\";\r\nimport ReactTooltip from \"react-tooltip\";\r\n\r\nexport default function Table({ columns, data }: { columns: any; data: any }) {\r\n  // Use the state and functions returned from useTable to build your UI\r\n  const { getTableProps, headerGroups, rows, prepareRow } = useTable(\r\n    {\r\n      columns,\r\n      data,\r\n    },\r\n    useSortBy\r\n  );\r\n\r\n  // Render the UI for your table\r\n  return (\r\n    <>\r\n      <ReactTooltip place=\"left\" type=\"success\" effect=\"solid\" />\r\n\r\n      <BTable striped bordered hover size=\"sm\" {...getTableProps()}>\r\n        <thead>\r\n          {headerGroups.map((headerGroup) => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map((column) => (\r\n                <th\r\n                  data-tip={column.Footer}\r\n                  {...column.getHeaderProps()}\r\n                  // {...column.getHeaderProps(column.getSortByToggleProps())}\r\n                >\r\n                  {column.render(\"Header\")}\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody>\r\n          {rows.map((row, i) => {\r\n            prepareRow(row);\r\n            return (\r\n              <tr {...row.getRowProps()}>\r\n                {row.cells.map((cell) => {\r\n                  return (\r\n                    <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\r\n                  );\r\n                })}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </BTable>\r\n    </>\r\n  );\r\n}\r\n","export const fetchDatas = async (...args) => {\r\n    const res = await fetch(...args);\r\n    return await res.json();\r\n  }","import React, { useEffect, useState } from \"react\";\r\nimport { useQuery } from \"react-query\";\r\nimport { fetchDatas } from \"../../api/fetch\";\r\nimport { mapHerosCalc } from \"./utils\";\r\n\r\nconst columns = [\r\n  {\r\n    Header: \"Name\",\r\n    accessor: \"name\",\r\n  },\r\n  {\r\n    Header: \"Price (wbnb)\",\r\n    accessor: \"price\",\r\n  },\r\n  {\r\n    Header: \"Hero Cost ($)\",\r\n    accessor: \"usdPrice\",\r\n  },\r\n  {\r\n    Header: \"Maximum Battles\",\r\n    accessor: \"battleCap\",\r\n  },\r\n  {\r\n    Header: \"Hero Rarity\",\r\n    accessor: \"heroRarityString\",\r\n  },\r\n  {\r\n    Header: \"Maximum $ Win By Hero Rarity\",\r\n    accessor: \"winCalc\",\r\n    Footer: \"(Hero cost by rarity + maximum gTHC by win) x THC price\",\r\n  },\r\n  {\r\n    Header: \"Maximum Benefits \",\r\n    accessor: \"winDiffCalc\",\r\n    Footer: \"Hero cost - Maximum $ by Win\",\r\n  },\r\n];\r\n\r\nexport const useDashboard = () => {\r\n  const [wbnbPrice, setwbnbPrice] = useState<number>(0);\r\n  const [THCPrice, setTHCPrice] = useState<number>(0);\r\n  const [isRefetchInterval, setIsRefetchInterval] = useState<boolean>(false);\r\n  const [heroes, setHeroes] = useState<any>();\r\n  const [herosPriceAlarm, setPriceAlarm] = useState<number>(61);\r\n  const [needAlarm, setNeedAlarm] = useState<boolean>(true);\r\n  const [alarm] = useState(\r\n    new Audio(\"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3\")\r\n  );\r\n\r\n  document.title = \"Thetan-sniper\";\r\n  const { data, isLoading } = useQuery(\r\n    \"heros\",\r\n    () =>\r\n      fetchDatas(\r\n        \"https://data.thetanarena.com/thetan/v1/nif/search?sort=PriceAsc&size=3852\"\r\n      ),\r\n    {\r\n      refetchInterval: isRefetchInterval ? 1000 : false,\r\n    }\r\n  );\r\n\r\n  const { isLoading: iswbnbPriceLoading } = useQuery(\r\n    \"wbnbPrice\",\r\n    () =>\r\n      fetchDatas(\r\n        \"https://exchange.thetanarena.com/exchange/v1/currency/price/32\"\r\n      ).then((result) => {\r\n        setwbnbPrice(result.data.toFixed(2));\r\n      }),\r\n    {\r\n      refetchInterval: isRefetchInterval ? 10000 : false,\r\n    }\r\n  );\r\n\r\n  const { isLoading: isTHCPriceLoading } = useQuery(\r\n    \"THCPrice\",\r\n    () =>\r\n      fetchDatas(\r\n        \"https://exchange.thetanarena.com/exchange/v1/currency/price/11\"\r\n      ).then((result) => {\r\n        setTHCPrice(result.data.toFixed(2));\r\n      }),\r\n    {\r\n      refetchInterval: isRefetchInterval ? 10000 : false,\r\n    }\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (data && data.data && wbnbPrice && THCPrice) {\r\n      const heroes = mapHerosCalc(data.data, wbnbPrice, THCPrice);\r\n      setHeroes(heroes);\r\n    }\r\n  }, [data, wbnbPrice, THCPrice]);\r\n\r\n  useEffect(() => {\r\n    if (needAlarm && heroes && heroes.some((x: any) => x.needAlarm)) {\r\n      alarm.play();\r\n    }\r\n  }, [heroes, alarm, needAlarm]);\r\n\r\n  return [\r\n    wbnbPrice,\r\n    heroes,\r\n    isLoading,\r\n    iswbnbPriceLoading,\r\n    THCPrice,\r\n    isTHCPriceLoading,\r\n    columns,\r\n    isRefetchInterval,\r\n    setIsRefetchInterval,\r\n    herosPriceAlarm,\r\n    setPriceAlarm,\r\n    needAlarm,\r\n    setNeedAlarm,\r\n  ];\r\n};\r\n","export function mapHerosCalc(\r\n  heros: Record<any, any>[],\r\n  wbnbPrice: number,\r\n  THCPrice: number\r\n) {\r\n  const heroRarityWinByWinDiccionary: number[] = [];\r\n  heroRarityWinByWinDiccionary[0] = 1.45;\r\n  heroRarityWinByWinDiccionary[1] = 5;\r\n  heroRarityWinByWinDiccionary[2] = 23.55;\r\n\r\n  const heroRarityDiccionary: string[] = [];\r\n  heroRarityDiccionary[0] = \"Common\";\r\n  heroRarityDiccionary[1] = \"Epic\";\r\n  heroRarityDiccionary[2] = \"Legendary\";\r\n\r\n  return heros.map((hero) => {\r\n    return {\r\n      ...hero,\r\n      usdPrice: (hero.price / 100000000) * wbnbPrice,\r\n      heroRarityString: `${heroRarityDiccionary[hero.heroRarity]} (${\r\n        heroRarityWinByWinDiccionary[hero.heroRarity]\r\n      } gTHC).`,\r\n      winCalc:\r\n        hero.battleCap *\r\n        (heroRarityWinByWinDiccionary[hero.heroRarity] + 6) *\r\n        THCPrice,\r\n      winDiffCalc:\r\n        hero.battleCap *\r\n          (heroRarityWinByWinDiccionary[hero.heroRarity] + 6) *\r\n          THCPrice -\r\n        (hero.price / 100000000) * wbnbPrice,\r\n      needAlarm: (hero.price / 100000000) * wbnbPrice < 61,\r\n    };\r\n  });\r\n}\r\n","import React, { useState } from \"react\";\r\nimport Table from \"../components/Table\";\r\nimport { useDashboard } from \"./useDashboard\";\r\nimport { mapHerosCalc } from \"./utils\";\r\n\r\nexport default function Dashboard() {\r\n  const [\r\n    wbnbPrice,\r\n    heroes,\r\n    isLoading,\r\n    iswbnbPriceLoading,\r\n    THCPrice,\r\n    isTHCPriceLoading,\r\n    columns,\r\n    isRefetchInterval,\r\n    setIsRefetchInterval,\r\n    herosPriceAlarm,\r\n    setPriceAlarm,\r\n    needAlarm,\r\n    setNeedAlarm,\r\n  ] = useDashboard();\r\n  const [herosPrice, setPrice] = useState<number>(herosPriceAlarm);\r\n\r\n  return (\r\n    <>\r\n      <div>WBNB Price: {!iswbnbPriceLoading && wbnbPrice}$</div>\r\n      <div>THC Price: {!isTHCPriceLoading && THCPrice}$</div>\r\n      Alarm --{\">\"}\r\n      <input\r\n        value={herosPrice}\r\n        onChange={(e) => setPrice(parseInt(e.target.value))}\r\n      />\r\n      <button onClick={() => setPriceAlarm(herosPrice)}>\r\n        {`🔊 => ${herosPriceAlarm}`}\r\n      </button>\r\n      <button onClick={() => setNeedAlarm(!needAlarm)}>\r\n        {needAlarm ? \"🔊\" : \"🔈\"}\r\n      </button>\r\n      <br></br>\r\n      <button onClick={() => setIsRefetchInterval(!isRefetchInterval)}>\r\n        {isRefetchInterval ? \"⏸\" : \"▶\"}\r\n      </button>\r\n      <br></br>\r\n      <div>\r\n        {!isLoading && heroes && <Table columns={columns} data={heroes} />}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport { QueryClient, QueryClientProvider } from \"react-query\";\r\nimport Dashboard from \"./pages/dashboard/Dashboard\";\r\n\r\nconst queryClient = new QueryClient();\r\n// npm run deploy\r\nexport default function App() {\r\n  return (\r\n    <QueryClientProvider client={queryClient}>\r\n      <Router>\r\n        <Dashboard />\r\n      </Router>\r\n    </QueryClientProvider>\r\n  );\r\n}\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}
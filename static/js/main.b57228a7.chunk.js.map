{"version":3,"sources":["pages/components/Table.tsx","api/fetch.js","pages/dashboard/useDashboard.ts","pages/dashboard/utils.ts","pages/dashboard/Dashboard.tsx","App.js","reportWebVitals.js","index.js"],"names":["Table","columns","data","useTable","useSortBy","getTableProps","headerGroups","rows","prepareRow","place","type","effect","striped","bordered","hover","size","map","headerGroup","getHeaderGroupProps","headers","column","Footer","getHeaderProps","render","row","i","getRowProps","cells","cell","getCellProps","fetchDatas","a","fetch","res","json","Header","accessor","mapHerosCalc","heros","wbnbPrice","THCPrice","heroRarityWinByWinDiccionary","heroRarityDiccionary","hero","usdPrice","price","heroRarityString","heroRarity","winCalc","battleCap","winDiffCalc","Dashboard","useState","setwbnbPrice","setTHCPrice","isRefetchInterval","setIsRefetchInterval","useQuery","refetchInterval","isLoading","then","result","toFixed","useDashboard","heroes","iswbnbPriceLoading","isTHCPriceLoading","onClick","queryClient","QueryClient","App","client","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b57228a7.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nimport BTable from \"react-bootstrap/Table\";\r\n\r\nimport { useSortBy, useTable } from \"react-table\";\r\nimport ReactTooltip from \"react-tooltip\";\r\n\r\nexport default function Table({ columns, data }: { columns: any; data: any }) {\r\n  // Use the state and functions returned from useTable to build your UI\r\n  const { getTableProps, headerGroups, rows, prepareRow } = useTable(\r\n    {\r\n      columns,\r\n      data,\r\n    },\r\n    useSortBy\r\n  );\r\n\r\n  // Render the UI for your table\r\n  return (\r\n    <>\r\n      <ReactTooltip place=\"left\" type=\"success\" effect=\"solid\" />\r\n\r\n      <BTable striped bordered hover size=\"sm\" {...getTableProps()}>\r\n        <thead>\r\n          {headerGroups.map((headerGroup) => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map((column) => (\r\n                <th data-tip={column.Footer} {...column.getHeaderProps()}>\r\n                  {column.render(\"Header\")}\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody>\r\n          {rows.map((row, i) => {\r\n            prepareRow(row);\r\n            return (\r\n              <tr {...row.getRowProps()}>\r\n                {row.cells.map((cell) => {\r\n                  return (\r\n                    <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\r\n                  );\r\n                })}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </BTable>\r\n    </>\r\n  );\r\n}\r\n","export const fetchDatas = async (...args) => {\r\n    const res = await fetch(...args);\r\n    return await res.json();\r\n  }","import React, { useState } from \"react\";\r\nimport { useQuery } from \"react-query\";\r\nimport { fetchDatas } from \"../../api/fetch\";\r\n\r\nconst columns = [\r\n  {\r\n    Header: \"Name\",\r\n    accessor: \"name\",\r\n  },\r\n  {\r\n    Header: \"Price (wbnb)\",\r\n    accessor: \"price\",\r\n  },\r\n  {\r\n    Header: \"Hero Cost ($)\",\r\n    accessor: \"usdPrice\",\r\n  },\r\n  {\r\n    Header: \"Maximum Battles\",\r\n    accessor: \"battleCap\",\r\n  },\r\n  {\r\n    Header: \"Hero Rarity\",\r\n    accessor: \"heroRarityString\",\r\n  },\r\n  {\r\n    Header: \"Maximum $ Win By Hero Rarity\",\r\n    accessor: \"winCalc\",\r\n    Footer: \"(Hero cost by rarity + maximum gTHC by win) x THC price\",\r\n  },\r\n  {\r\n    Header: \"Maximum Benefits \",\r\n    accessor: \"winDiffCalc\",\r\n    Footer: \"Hero cost - Maximum $ by Win\",\r\n  },\r\n];\r\n\r\nexport const useDashboard = () => {\r\n  const [wbnbPrice, setwbnbPrice] = useState<number>(0);\r\n  const [THCPrice, setTHCPrice] = useState<number>(0);\r\n  const [isRefetchInterval, setIsRefetchInterval] = useState<boolean>(false);\r\n\r\n  const { data: heroes, isLoading } = useQuery(\r\n    \"heros\",\r\n    () =>\r\n      fetchDatas(\r\n        \"https://data.thetanarena.com/thetan/v1/nif/search?sort=PriceAsc&size=3852\"\r\n      ),\r\n    {\r\n      refetchInterval: isRefetchInterval ? 1000 : false,\r\n    }\r\n  );\r\n\r\n  const { isLoading: iswbnbPriceLoading } = useQuery(\r\n    \"wbnbPrice\",\r\n    () =>\r\n      fetchDatas(\r\n        \"https://exchange.thetanarena.com/exchange/v1/currency/price/32\"\r\n      ).then((result) => {\r\n        setwbnbPrice(result.data.toFixed(2));\r\n      }),\r\n    {\r\n      refetchInterval: isRefetchInterval ? 10000 : false,\r\n    }\r\n  );\r\n\r\n  const { isLoading: isTHCPriceLoading } = useQuery(\r\n    \"THCPrice\",\r\n    () =>\r\n      fetchDatas(\r\n        \"https://exchange.thetanarena.com/exchange/v1/currency/price/11\"\r\n      ).then((result) => {\r\n        setTHCPrice(result.data.toFixed(2));\r\n      }),\r\n    {\r\n      refetchInterval: isRefetchInterval ? 10000 : false,\r\n    }\r\n  );\r\n\r\n  return [\r\n    wbnbPrice,\r\n    heroes,\r\n    isLoading,\r\n    iswbnbPriceLoading,\r\n    THCPrice,\r\n    isTHCPriceLoading,\r\n    columns,\r\n    isRefetchInterval,\r\n    setIsRefetchInterval,\r\n  ];\r\n};\r\n","export function mapHerosCalc(\r\n  heros: Record<any, any>[],\r\n  wbnbPrice: number,\r\n  THCPrice: number\r\n) {\r\n  const heroRarityWinByWinDiccionary: number[] = [];\r\n  heroRarityWinByWinDiccionary[0] = 1.45;\r\n  heroRarityWinByWinDiccionary[1] = 5;\r\n  heroRarityWinByWinDiccionary[2] = 23.55;\r\n\r\n  const heroRarityDiccionary: string[] = [];\r\n  heroRarityDiccionary[0] = \"Common\";\r\n  heroRarityDiccionary[1] = \"Epic\";\r\n  heroRarityDiccionary[2] = \"Legendary\";\r\n\r\n  return heros.map((hero) => {\r\n    return {\r\n      ...hero,\r\n      usdPrice: (hero.price / 100000000) * wbnbPrice,\r\n      heroRarityString: `${heroRarityDiccionary[hero.heroRarity]} (${\r\n        heroRarityWinByWinDiccionary[hero.heroRarity]\r\n      } gTHC).`,\r\n      winCalc:\r\n        hero.battleCap *\r\n        (heroRarityWinByWinDiccionary[hero.heroRarity] + 6) *\r\n        THCPrice,\r\n      winDiffCalc:\r\n        hero.battleCap *\r\n          (heroRarityWinByWinDiccionary[hero.heroRarity] + 6) *\r\n          THCPrice -\r\n        (hero.price / 100000000) * wbnbPrice,\r\n    };\r\n  });\r\n}\r\n","import React from \"react\";\r\nimport Table from \"../components/Table\";\r\nimport { useDashboard } from \"./useDashboard\";\r\nimport { mapHerosCalc } from \"./utils\";\r\n\r\nexport default function Dashboard() {\r\n  const [\r\n    wbnbPrice,\r\n    heroes,\r\n    isLoading,\r\n    iswbnbPriceLoading,\r\n    THCPrice,\r\n    isTHCPriceLoading,\r\n    columns,\r\n    isRefetchInterval,\r\n    setIsRefetchInterval,\r\n  ] = useDashboard();\r\n\r\n  return (\r\n    <>\r\n      <div>Wbnb Price: {!iswbnbPriceLoading && wbnbPrice}$</div>\r\n      <div>THC Price: {!isTHCPriceLoading && THCPrice}$</div>\r\n      <button onClick={() => setIsRefetchInterval(!isRefetchInterval)}>\r\n        {isRefetchInterval ? \"⏸\" : \"▶\"}\r\n      </button>\r\n      <br></br>\r\n      <div>\r\n        {!isLoading && (\r\n          <Table\r\n            columns={columns}\r\n            data={mapHerosCalc(heroes.data, wbnbPrice, THCPrice)}\r\n          />\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport { QueryClient, QueryClientProvider } from \"react-query\";\r\nimport Dashboard from \"./pages/dashboard/Dashboard\";\r\n\r\nconst queryClient = new QueryClient();\r\n// npm run deploy\r\nexport default function App() {\r\n  return (\r\n    <QueryClientProvider client={queryClient}>\r\n      <Router>\r\n        <Dashboard />\r\n      </Router>\r\n    </QueryClientProvider>\r\n  );\r\n}\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}